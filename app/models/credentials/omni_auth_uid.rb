# :namespace
module Credentials

# Associates an OmniAuth authentication method with the user account.
class OmniAuthUid < ::Credential
  # Virtual attribute: the OmniAuth provider.
  validates :provider, presence: true, length: 1..64
  def provider
    @omni_provider ||= name.split(',', 2).first
  end
  def provider=(new_provider)
    @omni_provider = new_provider
    self.name = "#{@omni_provider},#{@omni_uid}"
  end

  # Virtual attribute: the UID generated by the OmniAuth provider.
  validates :uid, presence: true, length: 1..128
  def uid
    @omni_uid ||= name.split(',', 2).last
  end
  def uid=(new_uid)
    @omni_uid = new_uid
    self.name = "#{@omni_provider},#{@omni_uid}"
  end

  # '1' unless this authentication method is blocked.
  validates :key, presence: true, inclusion: { in: ['0', '1'] }

  before_validation :set_blocked_to_false, on: :create
  # @private
  # By default, OmniAuth authentication methods are not blocked.
  def set_blocked_to_false
    self.key ||= '1' if self.key.nil?
  end
  private :set_blocked_to_false

  # @return [Boolean] true if the authentication method has been blocked
  def blocked?
    key == '0'
  end

  # @param [Boolean] new_blocked_value true if this authentication method has
  #     been blocked
  def blocked=(new_blocked_value)
    self.key = new_blocked_value ? '0' : '1'
    new_blocked_value ? true : false
  end

  # Locates a user given an OmniAuth hash.
  #
  # @return [User, Symbol] the authenticated User instance, or a symbol
  #     indicating the reason why the (potentially valid) hash was rejected
  def self.authenticate(omniauth_hash)
    credential = with omniauth_hash
    if credential
      user = credential.user
    else
      user = User.related_to_omniauth omniauth_hash
      unless user
        user = User.create_from_omniauth omniauth_hash
      end

      # If a user was found/created here, attach an OmniAuth credential to the
      # user, so it always survives.
      if user
        credential = Credentials::OmniAuthUid.create! user: user,
            provider: omniauth_hash['provider'], uid: omniauth_hash['uid']
      end
    end

    return :invalid unless credential
    return :blocked if credential.blocked?
    user.auth_bounce_reason(credential) || user
  end

  # Locates a user given an OmniAuth hash.
  #
  # This returns a user
  #
  # @return [User] the User matching the given hash, or nil if the hash is not
  #     associated with any user
  def self.with(omniauth_hash)
    Credentials::OmniAuthUid.where(name: name_from_omniauth(omniauth_hash)).
                             first
  end

  # @param [Hash] omniauth_hash the hash given in the omniauth.auth Rack
  #     environment variable
  # @return [String] the credential name derived from the hash
  def self.name_from_omniauth(omniauth_hash)
    "#{omniauth_hash['provider']},#{omniauth_hash['uid']}"
  end
end  # class Credentials::Email

end  # namespace Credentials

